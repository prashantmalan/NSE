import pandas as pd
import numpy as np
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.ensemble import IsolationForest
import plotly.subplots as sp
import plotly.graph_objects as go
import joblib
from datetime import timedelta

# Load your generated data
#logs_df = pd.read_csv("your_generated_data.csv")  # Replace with your actual data

# Convert Date_Inserted to datetime
logs_df['Date_Inserted'] = pd.to_datetime(logs_df['Date_Inserted'])

# Aggregate data by day and status
logs_df['Date'] = logs_df['Date_Inserted'].dt.date
aggregated_df = logs_df.groupby(['Product', 'SSRSGroupName', 'Status', 'Date']).agg({'RecCount': 'sum'}).reset_index()

# Get unique combinations
products = aggregated_df['Product'].unique()
ssrs_reports = aggregated_df['SSRSGroupName'].unique()
statuses = aggregated_df['Status'].unique()

# Train models for each product and report
for product in products:
    for report in ssrs_reports:
        # Filter data for the current product and report
        data = aggregated_df[(aggregated_df['Product'] == product) & (aggregated_df['SSRSGroupName'] == report)]
        
        if data.empty:
            continue
        
        # Initialize a column for deseasonalized data
        data['Deseasonalized'] = np.nan

        # Decompose and deseasonalize for each status
        for status in statuses:
            status_data = data[data['Status'] == status].copy()
            if not status_data.empty:
                if len(status_data) < 30:  # Ensure enough data points
                    continue
                try:
                    status_data.set_index('Date', inplace=True)
                    decomposition = seasonal_decompose(status_data['RecCount'], model='additive', period=30, two_sided=False)
                    deseasonalized = status_data['RecCount'] - decomposition.seasonal
                    data.loc[data['Status'] == status, 'Deseasonalized'] = deseasonalized.values
                except Exception:
                    continue

        if data['Deseasonalized'].isnull().all():
            continue

        # Prepare the data for the model
        X = data[['Deseasonalized']].fillna(0).values  # Fill NaN values if any

        # Fit the Isolation Forest model
        model = IsolationForest(contamination=0.01, random_state=42)
        model.fit(X)
        
        # Save the model
        joblib.dump(model, f"model_{product}_{report}.joblib")

# Prediction and Interactive Plotting

# Define the last month's date range for visualization
end_date = pd.to_datetime(aggregated_df['Date']).max()
start_date = end_date - timedelta(days=30)

# Calculate the number of rows for a grid with 2 columns per row
num_plots = len(products) * len(ssrs_reports)
num_rows = (num_plots + 1) // 2

# Create a subplot grid
fig = sp.make_subplots(rows=num_rows, cols=2, subplot_titles=[])

plot_count = 0

for product in products:
    for report in ssrs_reports:
        # Filter data for the current product and report
        data = aggregated_df[(aggregated_df['Product'] == product) & (aggregated_df['SSRSGroupName'] == report)]
        
        if data.empty:
            continue
        
        # Initialize a column for deseasonalized data
        data['Deseasonalized'] = np.nan

        # Decompose and deseasonalize for each status
        for status in statuses:
            status_data = data[data['Status'] == status].copy()
            if not status_data.empty:
                try:
                    status_data.set_index('Date', inplace=True)
                    decomposition = seasonal_decompose(status_data['RecCount'], model='additive', period=30, two_sided=False)
                    deseasonalized = status_data['RecCount'] - decomposition.seasonal
                    data.loc[data['Status'] == status, 'Deseasonalized'] = deseasonalized.values
                except Exception:
                    continue

        if data['Deseasonalized'].isnull().all():
            continue

        # Load the model
        model = joblib.load(f"model_{product}_{report}.joblib")

        # Predict anomalies
        X = data[['Deseasonalized']].fillna(0).values
        data['Anomaly'] = model.predict(X)

        # Filter last month's data
        last_month_data = data[(pd.to_datetime(data['Date']) >= start_date) & (pd.to_datetime(data['Date']) <= end_date)]
        
        # Determine the subplot position
        row = (plot_count // 2) + 1
        col = (plot_count % 2) + 1

        # Create a trace for each status
        traces = []
        for status in statuses:
            status_data = last_month_data[last_month_data['Status'] == status]
            if not status_data.empty:
                trace = go.Scatter(
                    x=status_data['Date'],
                    y=status_data['Deseasonalized'],
                    mode='lines+markers',
                    marker=dict(color=['red' if a == -1 else 'blue' for a in status_data['Anomaly']]),
                    name=f'{status}',
                    visible=False  # Set initial visibility
                )
                traces.append(trace)
                fig.add_trace(trace, row=row, col=col)

        # Add buttons for the dropdown menu
        fig.update_layout(
            updatemenus=[
                dict(
                    active=0,
                    buttons=list([
                        dict(label='All',
                             method='update',
                             args=[{'visible': [True] * len(traces)},
                                   {'title': f"Anomaly Detection - All Statuses for {product} - {report}"}]),
                    ] + [
                        dict(label=status,
                             method='update',
                             args=[{'visible': [i == j for i in range(len(traces))]},
                                   {'title': f"Anomaly Detection for {product} - {report} - {status}"}])
                        for j, status in enumerate(statuses)
                    ])
                )
            ]
        )

        # Set the title for each subplot
        fig.update_xaxes(title_text=f"{product} - {report}", row=row, col=col)

        plot_count += 1

# Update layout
fig.update_layout(height=600 * num_rows, width=1200, title_text="Anomaly Detection (Deseasonalized)", showlegend=True)
fig.show()
